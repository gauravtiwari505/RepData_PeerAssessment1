lapply(s,function(x),colmeans(x[,c("Sepal.Lenght")]))
lapply(s,function(x),colmeans(x["Sepal.Length"]))
lapply(s,function(x) colmeans(x["Sepal.Length"]))
lapply(s,function(x) colMeans(x["Sepal.Length"]))
head(iris)
apply(iris[,1:4],mean)
apply(iris[,1:4],1,mean)
apply(iris[,1:4],2,mean)
apply(iris,2,mean)
colMeans(iris)
rowMeans(iris[,1:4])
apply(iris,1,mean)
apply(iris[,1:4],2,mean)
data("mtcars")
head(mtcars)
lapply(split(mtcars,cyl),mean)
lapply(split(mtcars,mtcars$cyl),mean)
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
with(mtcars, tapply(mpg, cyl, mean))
lapply(mtcars,mean)
sapply(mtcars,cyl,mean)
sapply(mtcars,mtcars$cyl,mean)
tapply(mtcars$mpg,mtcars$cyl,mean)
sapply(split(mtcars$mpg,mtcars$cyl),mean)
mean(mtcars$mpg,mtcars$cyl)
head(mtcars)
tapply(mtcars$hp,mtcars$cyl,mean)
s = str(tapply(mtcars$hp,mtcars$cyl,mean))
s = tapply(mtcars$hp,mtcars$cyl,mean)
s
s[4]-s[6]
s[1]-s[2]
debug(ls)
ls()
0
q
1
library(datasets)
head(mtcars)
split(mtcars,mtcars$cyl)
s=split(mtcars,mtcars$cyl)
str(s)
lapply(s,function(x) colMeans(x[,"hp"]))
lapply(s,function(x) colMeans(x[,c("hp")]))
lapply(s,function(x) colMeans(x[hp]))
s
lapply(s,function(x) colMeans(x[,c("hp")]))
lapply(s,function(x) colMeans(x[,hp]))
lapply(s,function(x) colMeans(x[3]))
lapply(s,function(x) colMeans(x[4]))
str(lapply(s,function(x) colMeans(x[4])))
s=lapply(s,function(x) colMeans(x[4]))
s
str(s)
s[1]-s[3]
s=str(lapply(s,function(x) colMeans(x[4])))
head(iris)
apply(iris,2,mean)
rowMeans(iris[,1:4])
apply(iris,1,mean)
apply(iris[,1:4],2,mean)
colMeans(iris)
apply(iris[,1:4],1,mean)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
a<-matrix(c(1,2),c(3,4))
a<-matrix(c(1,2),c(3,4),2,2)
a
a<-matrix(1:2,3:4,2,2)
a
a<-matrix(c(1:4),nrow = 2, ncol =2)
a
makeCacheMatrix(a)
cacheSolve(a)
source('~/Desktop/assignment3_sample.R')
makeCacheMatrix(a)
cacheSolve(a)
makeCacheMatrix()
z=makeCacheMatrix(a)
z
cacheSolve(z)
cacheSolve(z)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
a<-matrix(c(1:4),nrow = 2, ncol =2)
z=makeCacheMatrix(a)
cacheSolve(a)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
z=matrix(c(1:4),nrow=2,ncol=2)
z
makeCacheMatrix(z)
a = makeCacheMatrix(z)
cacheSolve(a)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(a)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
a = makeCacheMatrix(matrix(1:4, nrow=2))
a
cacheSolve(a)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
a = makeCacheMatrix(matrix(1:4, nrow=2))
cacheSolve(a)
source('~/Desktop/assignment3_sample.R')
a=matrix(c(1:4),2,2)
a
z=makeCacheMatrix(a)
cacheSolve(z)
cacheSolve(z)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
a=matrix(c(1:4),2,2)
z=makeCacheMatrix(a)
cacheSolve(z)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
cacheSolve(z)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
a<-makeCacheMatrix(matrix(1:4, nrow=2))
z=makeCacheMatrix(a)
cacheSolve(z)
a<-makeCacheMatrix(matrix(1:4, nrow=2,ncol=2))
a
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
a<-matrix(c(1,3,5,2,5,3,5,6),nrow=3,ncol=3)
a<-matrix(c(1,3,5,2,5,3,5,6,8),nrow=3,ncol=3)
a
z=makeCacheMatrix(a)
cacheSolve(z)
cacheSolve(z)
source('~/Documents/Coursera_Data_Science/datasciencecoursera/Week_3/ProgrammingAssignment2/cachematrix.R')
swirl()
library("swirl")
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace = TRUE)
sample(1:6,4,replace = TRUE)
sample(1:20,10)
letters
LETTERS
sample(LETTERS)
flips<-sample(c(0,1),100,replace = TRUE,prob = c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1,size = 100,prob = 0.7)
flips2<-rbinom(100,size = 1,prob = 0.7)
flips2
sum(flips2)
rnorm()
?rnorm
rnorm(10)
rnorm(10,mean=100,sd=25)
rpois(5,10)
replicate(100,rpois(5,10))
my_pois<-replicate(100,rpois(5,10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
data("cars")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(cars$speed,cars$dist)
plot(cars$dist,cars$speed)
plot(cars$speed,cars$dist,xlab=speed)
plot(cars$speed,cars$dist,xlab="speed")
plot(x=cars$speed,y=cars$dist,xlab="speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed")
plot(x=cars$speed,y=cars$dist,xlab="Speed", ylab ="Stopping Distance")
plot(x=cars$speed,y=cars$dist,ylab ="Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab="Speed", ylab ="Stopping Distance")
plot(cars,main="My Plot")
plot(cars,main="My Plot",sub="My Plot Subtitle")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
mtcars
data("mtcars")
data(mtcars)
play()
dim(mtcars)
summary(mtcars)
str(mtcars)
head(a)
nxt()
?boxplaot()
?boxplaot
?boxplot
boxplot(mpg~cyl,data=mtcars)
hist(mtcars$mpg)
0
swirl()
hist(mtcars$mpg)
hist(mtcars$mpg,col=2)
hist(mtcars$mpg,col=6)
hist(mtcars$mpg,col=511)
hist(mtcars$mpg,col=51)
hist(mtcars$mpg,col=5435)
hist(mtcars$mpg,col=543)
hist(mtcars$mpg,col=53)
hist(mtcars$mpg,col=34)
hist(mtcars$mpg,col=34,xlim=c(20,30))
hist(mtcars$mpg,col=34,xlim=c(20,30),ylim=c(4,9))
hist(mtcars$mpg,col=64,xlim=c(20,30),ylim=c(4,9))
hist(mtcars$mpg,col=53)
setwd("/Volumes/WD Unlocker")
ls
list.dir()
list.files()
extras
system.time(readline("www.facebook.com"))
system.time(readline("www.facebook.com"))
system.time(readline("http://www.facebook.com"))
system.time(readline("https://www.facebook.com"))
set.seed(1)
rpois(5,2)
a=rpois(5,2)
class(a)
set.seed(1-)
set.seed(10)
x<-rep(0:1,each=5)
e=rnorm(10,0,20)
y=0.5 = 2*x +e
y=0.5 + 2*x +e
y
ploy(x,y)
plot(x,y)
library(datasets)
Rprof()
fit=lm(y~x1+x2)
summaryRprof()
x
url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
download.file(url, 'house.csv', method='curl')
house <- read.csv('house.csv')
View(house)
View(subset(house, house$VAL == 24))
sum(house$VAL==24, na.rm = T)
table(house$VAL)
View(house$VAL==24)
View(house[house$VAL==24, ])
install.packages('xlsx')
install.packages('xlsxjars')
install.packages('rJava')
library(xlsx)
url  <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx'
download.file(url, 'gas.xlsx', method = 'curl', mode = 'wb')
colI <- 7:15
rowI <- 18:23
gas  <- read.xlsx('gas.xlsx', sheetIndex = 1, colIndex = colI, rowIndex = rowI)
sum(gas$Zip*gas$Ext,na.rm=T)
library(xlsx)
library("xlsx")
library("xslx")
library(xlsx)
install.packages("xlsx")
install.packages("rjava")
install.packages("rJava")
install.packages("xlsxjar")
library(xlsx)
gas  <- read.xlsx('gas.xlsx', sheetIndex = 1, colIndex = colI, rowIndex = rowI)
colI <- 7:15
rowI <- 18:23
gas  <- read.xlsx('gas.xlsx', sheetIndex = 1, colIndex = colI, rowIndex = rowI)
gas
dat  <- read.xlsx('gas.xlsx', sheetIndex = 1, colIndex = colI, rowIndex = rowI)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
dfile ="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
download.file(dfile,"restaurants.xml","curl")
library(XML)
res=xmlTreeParse("rest.xml",useInternalNodes = TRUE)
res=xmlTreeParse("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml",useInternal = TRUE)
url="https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(url, useInternal = T)
doc
file.url <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml'
file.dest <- 'balt.rest.xml'
download.file(file.url, file.dest, method='curl')
doc <- xmlTreeParse('balt.rest.xml', useInternalNodes = TRUE)
doc
rootnode=xmlRoot(doc)
xmlName(rootnode)
rootnode
rootnode[1]
rootnode[[1]
]
zip <- xpathSApply(doc, '//zipcode', xmlValue)
length(zip[zip==21231])
a=read.csv(download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv","communities.csv","curl"),header = TRUE)
a
install.packages("data.table")
library(data.table)
DT=fread("communities.csv")
DT
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
install.packages('microbenchmark')
library(microbenchmark)
f1 <- function(x) {
DT[,mean(pwgtp15),by=SEX]
}
f2 <- function(x) {
sapply(split(DT$pwgtp15,DT$SEX),mean)
}
f3 <- function(x) {
mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)
}
f4 <- function(x) {
tapply(DT$pwgtp15,DT$SEX,mean)
}
microbenchmark(f1(x), f2(x), f3(x), f4(x))
?microbenchmark
swirl()
library(swirl)
swirl()
head(pollution)
dim(pollutant)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm,col="blue")
abline(h=12)
histppm
hist(ppm)
hist(ppm,col="green")
rug(ppm)
low
high
hist(ppm,col="green",breaks=100)
rug(ppm)
hist(ppm,col="green")
abline(v=12)
abline(v=12,lwd=2)
abline(v=median(ppm),lwd=4,col="magenta")
names(pollution)
reg<-table(pollution$region)
reg
boxplot(red,col="wheat", main="Number of Counties in Each Region")
boxplot(reg,col="wheat", main="Number of Counties in Each Region")
barplot(reg,col="wheat", main="Number of Counties in Each Region")
boxplot(pm25~region,pollution,col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east<-subset(pollution,reg=='east')
east<-subset(pollution,region=='east')
head(east)
hist(east$pm25)
hist(east$pm25,col="green")
hist(subset(pollution,region==west)$pm25,col="green")
hist(subset(pollution,region=='west')$pm25,col="green")
with(pollution,plot(lattitude,pm25))
with(pollution,plot(latitude,pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude,pollution$pm25,col=pollution$region)
plot(pollution$latitude,ppm,col=pollution$region)
abline(h=12,lwd=2,lty=2)
par(mfrow = c(1, 2), mar = c(5, 4, 2, 1))
west=subset(pollution,region=='west')
west<-subset(pollution,region=='west')
plot(west$latitude,west$pm25,main="West")
west<-subset(pollution,region=='east')
plot(east$latitude,east$pm25,main="Eest")
plot(east$latitude,east$pm25,main="East")
?Devices
with(faithful,plot(eruptions,waiting))
with(faithful,plot(eruptions,waiting,main="Old Faithful Geyser data"))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful,plot(eruptions,waiting,main="Old Faithful Geyser data"))
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful,plot(eruptions,waiting))
title(main="Old Faithful Geyser data")
dev.copy(png,"geyserplot.png")
dev.copy(png,file="geyserplot.png")
dev.off()
head(cars)
with(cars,plot(speed,dist))
text(mean(cars$speed),max(cars$dist),"SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp~Income|region,state,c(4,1))
xyplot(Life.Exp~Income|region,date=state,layout=c(4,1))
xyplot(Life.Exp~Income|region,data=state,layout=c(4,1))
xyplot(Life.Exp~Income|region,data=state,layout=c(2,2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ,hwy,data=mpg)
head(airquality)
xyplot(Ozone~Wind,data=airquality)
xyplot(Ozone~Wind,data=airquality)
with(airqiality,plot(Ozone,wind))
with(airquality,plot(Ozone,wind))
with(airquality,plot(Ozone,Wind))
install.packages("riverplot")
library(riverplot)
nodes <- c( LETTERS[1:3] )
edges <- list( A= list( C= 10 ), B= list( C= 10 ) )
r <- makeRiver( nodes, edges, node_xpos= c( 1,1,2 ),
node_labels= c( A= "Node A", B= "Node B", C= "Node C" ),
node_styles= list( A= list( col= "yellow" )) )
plot( r )
# equivalent form:
nodes <- data.frame( ID= LETTERS[1:3],
x= c( 1, 1, 2 ),
col= c( "yellow", NA, NA ),
labels= c( "Node A", "Node B", "Node C" ),
stringsAsFactors= FALSE )
r <- makeRiver( nodes, edges )
plot( r )
# all nodes but "A" will be red:
r <- makeRiver( nodes, edges, default_style= list( col="red" ) )
plot(r)
r <- makeRiver( nodes, edges, node_styles= list( A=list( col="red" ) ) )
plot( r )
data( minard )
nodes <- minard$nodes
edges <- minard$edges
colnames( nodes ) <- c( "ID", "x", "y" )
colnames( edges ) <- c( "N1", "N2", "Value", "direction" )
# color the edges by troop movement direction
edges$col <- c( "#e5cbaa", "black" )[ factor( edges$direction ) ]
# color edges by their color rather than by gradient between the nodes
edges$edgecol <- "col"
# generate the riverplot object and a style
river <- makeRiver( nodes, edges )
style <- list( edgestyle= "straight", nodestyle= "invisible" )
# plot the generated object
plot( river, lty= 1, default_style= style )
# Add cities
with( minard$cities, points( Longitude, Latitude, pch= 19 ) )
with( minard$cities, text( Longitude, Latitude, Name, adj= c( 0, 0 ) ) )
plot(r)
plot( riverplot.example() )
require(RCriteo)
source('~/Desktop/Criteo R Script.R')
<authToken>', 3865757725418576896 ,'</authToken>
<appToken>', '8674299021319168000' ,'</appToken>
<appToken>', "8674299021319168000" ,'</appToken>
getCriteoAccount <- function(authToken, appToken){
body = paste('<?xml version="1.0" encoding="utf-8"?>
<soap:Envelope xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">
<soap:Header>
<apiHeader xmlns="https://advertising.criteo.com/API/v201010">
<authToken>', "3865757725418576896",'</authToken>
<appToken>', "8674299021319168000" ,'</appToken>
<clientVersion>string</clientVersion>
</apiHeader>
</soap:Header>
<soap:Body>
<getAccount xmlns="https://advertising.criteo.com/API/v201010" />
</soap:Body>
</soap:Envelope>',sep="")
)
<appToken>', appToken ,'</appToken>
setwd("~/Documents/Coursera_Data_Science/RepData_PeerAssessment1")
head(datesum)
data <- read.csv("activity.csv", header = TRUE)
datesum <- aggregate(data$steps, list(data$date), sum)
colnames(datesum) <- c("date", "stepsSum")
head(datesum)
hist(datesum$stepsSum, xlab = "", col = "blue")
hist(datesum$stepsSum, xlab = "", col = "grey")
hist(datesum$stepsSum, xlab = "", col = "black")
hist(datesum$stepsSum, xlab = "", col = "purple")
hist(datesum$stepsSum, xlab = "", col = "magenta")
hist(datesum$stepsSum, xlab = "", col = "pink")
hist(datesum$stepsSum, xlab = "", col = "torquioise")
hist(datesum$stepsSum, xlab = "", col = "torquoise")
hist(datesum$stepsSum, xlab = "", col = "pink")
rm(list= ls())
data=read.csv("activity.csv",header=TRUE)
head(data)
activity=data
steps_in_a_day =aggregate(activity$steps,list(activity$date),sum)
head(steps_in_a_day)
colnames(steps_in_a_day) = c("Date","Steps")
head(steps_in_a_day)
hist(steps_in_a_day$Steps,col="blue")
hist(datesum$stepsSum, xlab = "", col = "blue")
rm(list = ls())
activity=read.csv("activity.csv",header=TRUE)
head(activity,100)
activity
mean_steps_per_5_mins <- tapply(activity$steps, activity$interval, mean, na.rm=TRUE)
plot(mean_steps_per_5_mins, type = "l", xlab = "")
sum(is.na(activity$steps))
head(activity)
